[{"lessons": [{"title": "The Basics", "bodyHTML": "<h1 id=\"thebasics\">The Basics</h1>", "lessonID": "intro", "body": "#The Basics"}, {"title": "Variables", "bodyHTML": "<h1 id=\"variables\">Variables</h1>\n<p>Variables are pieces of memory that store data and display it in different ways. Basically, variables store information. There are a couple of different basic data types: </p>\n<p>Integers: <code>123</code>  </p>\n<p>Characters: <code>'a'</code>  </p>\n<p>Floating Point Numbers: <code>11.125</code></p>\n<p>Variables need to be initialized. Variables are either <strong>static</strong> (their type cannot be changed) or <strong>dynamic</strong> (their type can be changed). Static variables are initialized by specifying their type, whereas dynamic variables are not. Here are some examples:</p>\n<h3 id=\"dynamic\">Dynamic</h3>\n<ul>\n<li>JavaScript: <code>var a = 0;</code></li>\n<li>Python: <code>a = 0;</code></li>\n</ul>\n<h3 id=\"static\">Static</h3>\n<ul>\n<li>Java: <code>int a = 0;</code></li>\n<li>C++: <code>int a = 0;</code></li>\n</ul>\n<h2 id=\"usingvariables\">Using Variables</h2>\n<p>Variables can be used and modified by assigning or using them in expressions, such as:</p>\n<pre><code>a = 0\nb = a + 1\nprint(b)\n</code></pre>\n<p>This will print 1, as it uses the variable <code>a</code> and adds 1 to it. </p>\n<p>You will learn more about basic data types in the next lesson. </p>", "lessonID": "variables", "body": "#Variables\n\nVariables are pieces of memory that store data and display it in different ways. Basically, variables store information. There are a couple of different basic data types: \n\nIntegers: `123`  \n\nCharacters: `'a'`  \n\nFloating Point Numbers: `11.125`\n\nVariables need to be initialized. Variables are either **static** (their type cannot be changed) or **dynamic** (their type can be changed). Static variables are initialized by specifying their type, whereas dynamic variables are not. Here are some examples:\n\n###Dynamic\n\n- JavaScript: `var a = 0;`\n- Python: `a = 0;`\n\n###Static\n\n- Java: `int a = 0;`\n- C++: `int a = 0;`\n\n##Using Variables\n\nVariables can be used and modified by assigning or using them in expressions, such as:\n\n    a = 0\n    b = a + 1\n    print(b)\n\nThis will print 1, as it uses the variable `a` and adds 1 to it. \n\nYou will learn more about basic data types in the next lesson. "}, {"title": "Flow Control", "bodyHTML": "<h1 id=\"flowcontrol\">Flow Control</h1>\n<p>Flow Control statements control how the program flows: i.e, how it gets executed.</p>\n<h1 id=\"conditionals\">Conditionals</h1>\n<p>Conditionals are statements that execute if a condition is true. Conditionals usually come in a if-else if-else format.</p>\n<p><strong>Python</strong></p>\n<pre><code>if a == 0:\n  print(a - 1)\nelif a == 1: \n  print(a)\nelse:\n  print(a + 1)    \n</code></pre>\n<p><strong>Java/C++</strong></p>\n<pre><code>if (a == 0) {\n  print(a - 1);\n} else if (a == 1) {\n  print(a);\n} else {\n  print(a + 1);\n}\n</code></pre>\n<h1 id=\"loops\">Loops</h1>\n<p>A loop is a block of code that executes until a condition is not met. </p>\n<h2 id=\"typesofloops\">Types of Loops</h2>\n<p>There are two types of loops: For loops and While Loops</p>\n<h3 id=\"whileloops\">While Loops</h3>\n<p>While loops execute a block of code <strong>while</strong> a condition is true. </p>\n<p>Examples:</p>\n<p><strong>Python:</strong></p>\n<pre><code>while a &gt; 0:\n  print(a)\n  a -= 1\n</code></pre>\n<p><strong>Java/C++:</strong></p>\n<pre><code>while (a &gt; 0){\n  print(a)\n  a -= 1\n}\n</code></pre>\n<h3 id=\"forloops\">For Loops</h3>\n<p>For loops have one of two structures:</p>\n<ol>\n<li>iterating through a sequence:</li>\n</ol>\n<p><strong>Python:</strong></p>\n<pre><code>for a in myList:  \n  print(a)\n</code></pre>\n<p><strong>Java/C++:</strong></p>\n<pre><code>for (int a : myList) {\n  print(a);\n}\n</code></pre>\n<ol start=\"2\">\n<li>Pre-while-post format</li>\n</ol>\n<p>The format is <code>for(a;b;c)</code></p>\n<p>This is equivalent to:</p>\n<pre><code>a;\nwhile (b) {\n  ...\n  c;\n}\n</code></pre>\n<p>This format is not available in <strong>Python</strong> </p>\n<p><strong>Java/C++</strong></p>\n<pre><code>for (int a = 0; a &lt; 10; a++) {\n  print(a);\n}\n</code></pre>\n<p>This could be rewritten as:</p>\n<pre><code>int a = 0;\nwhile (a &lt; 10) {\n  print(a);\n  a++;\n}\n</code></pre>\n<h2 id=\"controlstatements\">Control Statements</h2>\n<p>Control Statements control how a loop flows.\nThere are two control statements: <code>break</code> and <code>continue</code>.</p>\n<p>Break statements exit the loop and starts executing after the loop body.</p>\n<p>Continue statements go to the top of the loop, re-evaluate the condition and execute the loop body.</p>\n<p><strong>Python</strong></p>\n<pre><code>while a &gt; 0: \n  a -= 1\n  if a == 1:\n    break # Goes to line 7\n  if a == 2:\n    continue # Goes to line 1 and re-evaluates a &gt; 0\nprint(a)\n</code></pre>\n<p><a href=\"https://docs.python.org/3/tutorial/controlflow.html\">Python Docs</a><br></p>\n<p><a href=\"http://www.cplusplus.com/doc/tutorial/control/\">C++ Docs</a><br></p>\n<p><a href=\"zetcode.com/lang/java/flow/\">Java Docs</a></p>", "lessonID": "flow-control", "body": "# Flow Control\n\nFlow Control statements control how the program flows: i.e, how it gets executed.\n\n# Conditionals\n\nConditionals are statements that execute if a condition is true. Conditionals usually come in a if-else if-else format.\n\n**Python**\n\n    if a == 0:\n      print(a - 1)\n    elif a == 1: \n      print(a)\n    else:\n      print(a + 1)    \n\n**Java/C++**\n\n    if (a == 0) {\n      print(a - 1);\n    } else if (a == 1) {\n      print(a);\n    } else {\n      print(a + 1);\n    }\n\n\n\n# Loops\n\nA loop is a block of code that executes until a condition is not met. \n\n## Types of Loops\n\nThere are two types of loops: For loops and While Loops\n\n### While Loops\n\nWhile loops execute a block of code **while** a condition is true. \n\nExamples:\n\n**Python:**\n\n    while a > 0:\n      print(a)\n      a -= 1\n\n**Java/C++:**\n\n    while (a > 0){\n      print(a)\n      a -= 1\n    }\n\n### For Loops\n\nFor loops have one of two structures:\n\n1. iterating through a sequence:\n\n**Python:**\n    \n    for a in myList:  \n      print(a)\n\n**Java/C++:**\n\n    for (int a : myList) {\n      print(a);\n    }\n\n2. Pre-while-post format\n\nThe format is `for(a;b;c)`\n\nThis is equivalent to:\n\n    a;\n    while (b) {\n      ...\n      c;\n    }\n\nThis format is not available in **Python** \n\n**Java/C++**\n    \n    for (int a = 0; a < 10; a++) {\n      print(a);\n    }\n\nThis could be rewritten as:\n   \n\n    int a = 0;\n    while (a < 10) {\n      print(a);\n      a++;\n    }\n\n## Control Statements\n\nControl Statements control how a loop flows.\nThere are two control statements: `break` and `continue`.\n\nBreak statements exit the loop and starts executing after the loop body.\n\nContinue statements go to the top of the loop, re-evaluate the condition and execute the loop body.\n\n**Python**\n\n    while a > 0: \n      a -= 1\n      if a == 1:\n        break # Goes to line 7\n      if a == 2:\n        continue # Goes to line 1 and re-evaluates a > 0\n    print(a)\n\n<a href='https://docs.python.org/3/tutorial/controlflow.html'>Python Docs</a><br />\n\n\n<a href='http://www.cplusplus.com/doc/tutorial/control/'>C++ Docs</a><br />\n\n\n<a href='zetcode.com/lang/java/flow/'>Java Docs</a>"}], "seriesID": "basics"}, {"lessons": [{"title": "Operators", "lessonID": "intro", "body": "#Operators\noperators", "bodyHTML": "<h1 id=\"operators\">Operators</h1>\n<p>operators</p>"}], "seriesID": "operators"}, {"lessons": [{"title": "Basic Data Types", "body": "#Basic Data Types", "bodyHTML": "<h1 id=\"basicdatatypes\">Basic Data Types</h1>", "lessonID": "intro"}], "seriesID": "basic-data-types"}, {"lessons": [{"title": "Functions", "bodyHTML": "<h1 id=\"functions\">Functions</h1>", "lessonID": "intro", "body": "#Functions"}], "seriesID": "Functions"}, {"lessons": [{"title": "Classes", "bodyHTML": "<h1 id=\"classes\">Classes</h1>", "lessonID": "intro", "body": "#Classes"}], "seriesID": "classes"}, {"lessons": [{"title": "Common Data Structures", "body": "#Common Data Structures", "bodyHTML": "<h1 id=\"commondatastructures\">Common Data Structures</h1>", "lessonID": "intro"}], "seriesID": "common-data-structures"}, {"lessons": [{"title": "The Art of Attacking Problems", "bodyHTML": "<h1 id=\"theartofattackingproblems\">The Art of Attacking Problems</h1>", "lessonID": "intro", "body": "#The Art of Attacking Problems"}], "seriesID": "problem-approach"}, {"lessons": [{"title": "Math in Programming", "bodyHTML": "<h1 id=\"mathematicalapplicationsinprogrammingproblems\">Mathematical Applications in Programming Problems</h1>\n<p>Mathematics can often be used to simplify algorithms and formulas used for programming problems into simpler and more efficient algorithms and formulas, which often is crucial for reducing the time complexity of a problem to an acceptable complexity.</p>", "lessonID": "intro", "body": "# Mathematical Applications in Programming Problems\n\nMathematics can often be used to simplify algorithms and formulas used for programming problems into simpler and more efficient algorithms and formulas, which often is crucial for reducing the time complexity of a problem to an acceptable complexity."}, {"title": "Sequence Sums", "bodyHTML": "<h1 id=\"sequencesums\">Sequence Sums</h1>\n<p>Let's take a look at this sequence for example: <code>1 4 7 10 ...</code>. Let's say the problem is to add up the first <code>n</code> elements. Obviously, one could write the following:</p>\n<pre><code>e = 1\ntotal = 0\nfor _ in range(int(input())):\n    total += e\n    e += 3\nprint(total)\n</code></pre>\n<p>This is an <code>O(n)</code> solution, which isn't so bad, but let's see how we could make it better. We can write the general term as <code>3t - 2</code> for term <code>t</code>. Then, the sum of the first <code>n</code> elements is:</p>\n<pre><code>(3(1) - 2) + (3(2) - 2) + ... + (3(n) - 2)\n</code></pre>\n<p>If we add that sum to itself:</p>\n<pre><code>  (3(1) - 2) + (3(2) - 2) + ... + (3(n) - 2)\n+ (3(n) - 2) + ... + (3(2) - 2) + (3(1) - 2)\n= (3(n + 1) - 2) + ... + (3(n + 1) - 2)\n= n(3(n + 1) - 2)\n</code></pre>\n<p>Now, we divide that by 2 to cancel out adding the sum to itself once:</p>\n<pre><code>(n / 2)(3(n + 1) - 2)\n</code></pre>\n<p>So, we can replace the solution with this:</p>\n<pre><code>n = int(input())\nprint((n / 2) * (3 * n + 1))\n</code></pre>\n<p>This is <code>O(1)</code>, and obviously better.</p>\n<p>In general, you can usually simply sums of sequences down to an <code>O(1)</code> solution.</p>", "lessonID": "sequence-sums", "body": "# Sequence Sums\n\nLet's take a look at this sequence for example: `1 4 7 10 ...`. Let's say the problem is to add up the first `n` elements. Obviously, one could write the following:\n\n    e = 1\n    total = 0\n    for _ in range(int(input())):\n        total += e\n        e += 3\n    print(total)\n\nThis is an `O(n)` solution, which isn't so bad, but let's see how we could make it better. We can write the general term as `3t - 2` for term `t`. Then, the sum of the first `n` elements is:\n\n    (3(1) - 2) + (3(2) - 2) + ... + (3(n) - 2)\n\nIf we add that sum to itself:\n\n      (3(1) - 2) + (3(2) - 2) + ... + (3(n) - 2)\n    + (3(n) - 2) + ... + (3(2) - 2) + (3(1) - 2)\n    = (3(n + 1) - 2) + ... + (3(n + 1) - 2)\n    = n(3(n + 1) - 2)\n\nNow, we divide that by 2 to cancel out adding the sum to itself once:\n\n    (n / 2)(3(n + 1) - 2)\n\nSo, we can replace the solution with this:\n\n    n = int(input())\n    print((n / 2) * (3 * n + 1))\n\nThis is `O(1)`, and obviously better.\n\nIn general, you can usually simply sums of sequences down to an `O(1)` solution."}, {"title": "Euler's GCD Algorithm", "bodyHTML": "<h1 id=\"eulersgcdalgorithm\">Euler's GCD Algorithm</h1>\n<p>The Greatest Common Divisor (GCD) of two or more numbers is the largest number that evenly divides all of the numbers. For example, the GCD of 12 and 15 is 3 because 12 and 15 are both divisible by 3, but not both by any larger number (you can try all numbers up to 12 to see that this is the case). You could, in theory, test every number and keep track of which number was the largest one that divides all of the numbers. However, this is <code>O(mn)</code> with <code>m</code> being the smallest number and <code>n</code> being the number of numbers.</p>\n<p>Euler presents an interesting algorithm that has polynomial time complexity and is significantly more efficient than just brute-forcing. Consider <code>x</code> and <code>y</code>. If <code>x</code> and <code>y</code> are both divisible by some <code>k</code>, then we can write <code>x = ak</code> and <code>y = bk</code>. Assume <code>x &gt; y</code> (we can just swap them if <code>y &gt; x</code>. Then, <code>x - y</code> is <code>ak - bk = (a - b)k</code>. Thus, <code>x - y</code> and <code>y</code> are both divisible by <code>k</code>. Following this principle, we can get the recursive algorithm <code>GCD(x, y): x &gt; y = GCD(x - y, y)</code> with the base case <code>GCD(x, x) = x</code> or <code>GCD(x, 1) = 1</code>. Let's implement the recursive steps.</p>\n<pre><code>def GCD(x, y):\n    if x &gt; y: return GCD(x - y, y)\n    else: return GCD(y - x, x)\n</code></pre>\n<p>We can now add the two base cases:</p>\n<pre><code>def GCD(x, y):\n    if x == y: return x\n    if x == 1: return 1\n    if y == 1: return 1\n    if x &gt;  y: return GCD(x - y, y)\n    if x  &lt; y: return GCD(y - x, x)\n</code></pre>\n<p>This is the final algorithm. Keep in mind that because it is recursive, it can run into recursion errors, but that shouldn't be a problem if numbers are within reasonable range.</p>", "lessonID": "gcd-euler", "body": "# Euler's GCD Algorithm\n\nThe Greatest Common Divisor (GCD) of two or more numbers is the largest number that evenly divides all of the numbers. For example, the GCD of 12 and 15 is 3 because 12 and 15 are both divisible by 3, but not both by any larger number (you can try all numbers up to 12 to see that this is the case). You could, in theory, test every number and keep track of which number was the largest one that divides all of the numbers. However, this is `O(mn)` with `m` being the smallest number and `n` being the number of numbers.\n\nEuler presents an interesting algorithm that has polynomial time complexity and is significantly more efficient than just brute-forcing. Consider `x` and `y`. If `x` and `y` are both divisible by some `k`, then we can write `x = ak` and `y = bk`. Assume `x > y` (we can just swap them if `y > x`. Then, `x - y` is `ak - bk = (a - b)k`. Thus, `x - y` and `y` are both divisible by `k`. Following this principle, we can get the recursive algorithm `GCD(x, y): x > y = GCD(x - y, y)` with the base case `GCD(x, x) = x` or `GCD(x, 1) = 1`. Let's implement the recursive steps.\n\n    def GCD(x, y):\n        if x > y: return GCD(x - y, y)\n        else: return GCD(y - x, x)\n\nWe can now add the two base cases:\n\n    def GCD(x, y):\n        if x == y: return x\n        if x == 1: return 1\n        if y == 1: return 1\n        if x >  y: return GCD(x - y, y)\n        if x  < y: return GCD(y - x, x)\n\nThis is the final algorithm. Keep in mind that because it is recursive, it can run into recursion errors, but that shouldn't be a problem if numbers are within reasonable range."}], "seriesID": "math"}, {"lessons": [{"title": "Sorting Algorithms", "bodyHTML": "<h1 id=\"sorting\">Sorting</h1>\n<p>Sorting is the process or ordering a sequence based on some condition. Although languages will do this for you, it is a good exercise to try these algorithms and know how they work.</p>", "lessonID": "intro", "body": "#Sorting\n\nSorting is the process or ordering a sequence based on some condition. Although languages will do this for you, it is a good exercise to try these algorithms and know how they work."}], "seriesID": "sorting"}, {"lessons": [{"title": "Searching Algorithms", "bodyHTML": "<h1 id=\"searchingalgorithms\">Searching Algorithms</h1>", "lessonID": "intro", "body": "#Searching Algorithms"}], "seriesID": "searching"}, {"lessons": [{"title": "Graph Theory", "bodyHTML": "<h1 id=\"graphtheory\">Graph Theory</h1>", "lessonID": "intro", "body": "#Graph Theory"}], "seriesID": "graph-theory"}, {"lessons": [{"title": "Greedy Algorithms", "lessonID": "intro", "body": "#Greedy Algorithms", "bodyHTML": "<h1 id=\"greedyalgorithms\">Greedy Algorithms</h1>"}], "seriesID": "greedy"}, {"lessons": [{"title": "String Algorithms", "bodyHTML": "<h1 id=\"stringalgorithms\">String Algorithms</h1>", "lessonID": "intro", "body": "#String Algorithms"}], "seriesID": "string-finding"}, {"lessons": [{"title": "Dynamic Programming", "bodyHTML": "<h1 id=\"dynamicprogramming\">Dynamic Programming</h1>", "lessonID": "intro", "body": "#Dynamic Programming"}], "seriesID": "dynamic-programming"}, {"lessons": [{"title": "Advanced Data Structures", "bodyHTML": "<h1 id=\"advanceddatastructures\">Advanced Data Structures</h1>", "lessonID": "intro", "body": "#Advanced Data Structures"}], "seriesID": "advanced-data-structures"}]